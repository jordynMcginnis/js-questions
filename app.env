5) No because [] is an obj with is always true however you cannot compare an obj with == .
6) str.split('').reverse()



















































Explain how this works in JavaScript
  The "this" keyword lets you reuse functions with different contexts.

Explain how prototypal inheritance works
  an example would be if a object had a failed looked up then that object would delegate to another specified object to check if that object that the key.

What do you think of AMD vs CommonJS?
Explain why the following doesn't work as an IIFE: function foo(){ }();. What needs to be changed to properly make it an IIFE?
you need to wrape the iife in () so that the js interpreter correctly reads the code and knows to ii the function.

What's the difference between a variable that is: null, undefined or undeclared? How would you go about checking for any of these states?
null: is a variable that has a value of null
undefined: is a defined variable but does not have a value
undeclared: not declared


What is a closure, and how/why would you use one?
  a closure is a function that creates a outer scope so that at the time of invocation is can correctly refer to an outer functions variables

Can you describe the main difference between a .forEach loop and a .map() loop and why you would pick one versus the other?
foreach loops over an array
.map maps over and array returning an array

What's a typical use case for anonymous functions?
  for a function that is not being reused.

How do you organize your code? (module pattern, classical inheritance?)

What's the difference between host objects and native objects?

Difference between: function Person(){}, var person = Person(), and var person = new Person()?

What's the difference between .call and .apply?
.call is immediatly invoked function call taking in arguemnts one by one.
.apply iif taking in an array of arguemtns

Explain Function.prototype.bind.

When would you use document.write()?
What's the difference between feature detection, feature inference, and using the UA string?
Explain Ajax in as much detail as possible.
What are the advantages and disadvantages of using Ajax?
Explain how JSONP works (and how it's not really Ajax).
Have you ever used JavaScript templating? If so, what libraries have you used?
Explain "hoisting".
hoisting happens during the creation phase of the global execuction process when declared variable are initally assigned the value of undefined.

Describe event bubbling.
What's the difference between an "attribute" and a "property"?
Why is extending built-in JavaScript objects not a good idea?
Difference between document load event and document DOMContentLoaded event?
What is the difference between == and ===?
Explain the same-origin policy with regards to JavaScript.
Make this work: duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]
Why is it called a Ternary expression, what does the word "Ternary" indicate?
What is "use strict";? what are the advantages and disadvantages to using it?
Create a for loop that iterates up to 100 while outputting "fizz" at multiples of 3, "buzz" at multiples of 5 and "fizzbuzz" at multiples of 3 and 5
Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?
Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?
Explain what a single page app is and how to make one SEO-friendly.
What is the extent of your experience with Promises and/or their polyfills?
What are the pros and cons of using Promises instead of callbacks?
What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?
What tools and techniques do you use debugging JavaScript code?
What language constructions do you use for iterating over object properties and array items?
Explain the difference between mutable and immutable objects.
Explain the difference between synchronous and asynchronous functions.
What is event loop? What is the difference between call stack and task queue?
Explain the differences on the usage of foo between function foo() {} and var foo = function() {}
What are the differences between variables created using let, var or const?
What are the differences between ES6 class and ES5 function constructors?
Can you offer a use case for the new arrow => function syntax? How does this new syntax differ from other functions?
What advantage is there for using the arrow syntax for a method in a constructor?
What is the definition of a higher-order function?
Can you give an example for destructuring an object or an array?
ES6 Template Literals offer a lot of flexibility in generating strings, can you give an example?
Can you give an example of a curry function and why this syntax offers an advantage?
What are the benefits of using spread syntax and how is it different from rest syntax?
How can you share code between files?
Why you might want to create static class members?